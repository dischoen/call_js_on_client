        // in use
        function addPoint(x, y, polylineId) {
            const polyline = document.getElementById(polylineId);
            const svg = polyline.ownerSVGElement;
            const point = svg.createSVGPoint();
            //console.log("hier", x, y);
            point.x = x;
            point.y = y;
            polyline.points.appendItem(point);
        }

        function clearPoints(polylineId) {
            const polyline = document.getElementById(polylineId);

            let points = '';
            polyline.setAttribute('points', points)
        }

        //in use
        function deleteFirstPoint(polylineId) {
            const polyline = document.getElementById(polylineId);
            if (!polyline) {
                console.log('Polyline not found');
                return;
            }
            const points = polyline.getAttribute('points');
            const pointsArray = points.trim().split(/\s+/);
            if (pointsArray.length < 2) {
                console.error('Not enough points to remove');
                return;
            }
            pointsArray.shift();
            const newPoints = pointsArray.join(' ');
            polyline.setAttribute('points', newPoints);
        }

        // in use. remove wrapper function
        function movePolylinePointsLeft(polylineId, distance) {
            const polyline = document.getElementById(polylineId);

            if (!polyline) {
                console.log('Polyline not found');
                return;
            }

            const points = polyline.getAttribute('points');

            const pointsArray = points.trim().split(/\s+/);

            const newPointsArray = pointsArray.map(point => {
                let [x, y] = point.split(',').map(Number);
                x -= distance;
                return `${x},${y}`;
            });

            const newPoints = newPointsArray.join(' ');

            polyline.setAttribute('points', newPoints);
        }

        // in use
        function getFirstPointX(polylineId) {

            const polyline = document.getElementById(polylineId);
            if (!polyline) {
                console.log('Polyline not found');
                return -1;
            }
            const points = polyline.getAttribute('points');
            const pointsArray = points.trim().split(/\s+/);
            if (pointsArray.length === 0) {
                console.error('No points found in polyline');
                return -1;
            }
            const firstPoint = pointsArray[0];
            const [x, y] = firstPoint.split(',').map(Number);
            return x; 
        }

        function testData() {
            let max = parseInt(document.getElementById("max").value)

            let timeframe = parseInt(document.getElementById("timeframe").value)
            for (i = 0; i < 25000; i++) {
                setTimeout(() => {


                    let ran = Math.floor(Math.random() * 100) + 1;
                    if (ran > 10) {
                        y = Math.floor(Math.random() * max) + 1;
                    }
                    else {
                        y = Math.floor(Math.random() * (max * 2)) + 1;
                        
                    }
                    ranx1 = Math.floor(Math.random() * 25) + 1;
                    ranx2 = Math.floor(Math.random() * 10) + 1;
                    ranx3 = Math.floor(Math.random() * 5) + 1;
                    if (ranx1 == 1) {
                        x = Math.floor(Math.random() * (timeframe / 3)) + 1;
                    }
                    else if (ranx2 == 1 && ranx1 != 1) {
                        x = Math.floor(Math.random() * (timeframe / 8)) + 1;
                    } if (ranx3 == 1 && ranx1 != 1 && ranx2 != 1) {
                        x = Math.floor(Math.random() * (timeframe / 15)) + 1;
                    } else {
                        x = Math.floor(Math.random() * (timeframe / 30)) + 1;
                    }

                    test(x, y, "polyline1")
                    test(x+5, y+1, "polyline2")
                    test(x+2, y+2, "polyline3")
                    test(x+4, y+3, "polyline4")
                    test(x+2, y+4, "polyline5")



                }, i * 250);
            }
        }

        function test(x, y, polylineId) {
            //let max = parseInt(document.getElementById("max").value)
            let max = 123
            //let timeframe = parseInt(document.getElementById("timeframe").value)
            let timeframe = 123
            
            if (y > max|| y<0) {
                return;
            } else {
                y = calcY(y, max);

            }
            movePolylineWithX(x, polylineId, timeframe);
            while (getFirstPointX(polylineId) < 0) {
                deleteFirstPoint(polylineId)
                if(!getFirstPointX(polylineId)){
                    break;
                }
            }
            addPoint(500, y, polylineId)
        }

        // in use
        function movePolylineWithX(x, polylineId, timeframe) {
            movePolylinePointsLeft(polylineId, (x / timeframe * 500))
        }

        // in use
        function calcY(y, max) {
            return Math.floor((500 * y / max));
        }
